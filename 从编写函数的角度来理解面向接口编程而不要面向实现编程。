（０）为什么要选择从编写函数的角度来看这个问题？　　
　　第一，从某个角度看，一个程序中的代码可以归结为两大部分：第一部分数据，第二部分处理数据的函数和类（对象）。
　　第二，处理数据的类（对象）的对外接口是类的方法，而类的方法本身就是函数，所以“一切面向接口编程而不要面向实现编程问题”最终都归结为”编写一个函数时的面向接口编程而不要面向实现编程问题“。
（1）函数的接口指的是什么？它的作用又是什么？
　　函数的接口就是函数的输入参数、输出参数、返回值、输出的文件数据。
　　它的作用：是函数与外界通信的桥梁。
（２）具体来说，编写一个函数时的面向接口编程问题就是：面向函数的输入参数、输出参数、返回值、输出的数据文件来编程。　例如，编程处理人的年龄问题，虽然我们马上将要处理的具体问题中的那个人的年龄是30岁，但是我们不在函数体内直接使用30；而是设计一个输入参数 "int age = 0", 而后在函数体内引用参数age.
（３）具体来说，编写一个函数时的面向实现编程问题就是：把程序要解决的某个具体问题所依赖的具体数据直接编写在函数体内。例如，编程处理人的年龄问题，对于我们马上将要处理的具体问题中的那个人的年龄是30岁，那么我们就在函数体内直接使用30；而不设计一个输入参数 "int age = 0", 之后在函数体内引用参数age.
（４）具体来说，程序中唯一一个需要面向实现编程的地方：那就是启动程序运行的主函数里面，即 main()函数里面。注意，一个程序中永远仅仅只应在这一个地方面向实现编程。
（５）抽象来说，可以将面向接口编程简单理解为：从解决一件事扩展到解决一类事。　接口反映了系统设计人员对系统的抽象理解。
（６）面向接口编程的目的或好处。
　　第一，实现某个函数与程序其它部分的松耦合或实现函数的独立性。即降低函数与程序其他部分的耦合度，让函数较大程度的独立于程序的其他部分，因此不必因为程序其它部分代码的变更而导致修改本函数。当众多函数都紧密耦合、互相牵扯时，牵一发而动全身，只要程序中某一点稍有变化，程序员就要全面改动代码，可想而知这是多么耗费精力，多么可怕的事情。
　　第二，增加函数代码重用的可能性，提高编程效率。
　　第三，提高代码组合的几率，便于多个程序员之间的分工协作。
　　第四，增加灵活性，可以较好的应对客户经常变化的需求。实践中，不必调整程序代码，仅需调整程序运行参数，即可以应对用户变化了的需求。
（７）“面向接口编程而不要面向实现编程”对应六大设计原则之“开闭原则”。
　　开闭原则明确告诉我们：软件实现应该对扩展开放，对修改关闭。其含义是说，一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化。
